AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Language Learning API

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage (e.g., dev, prod)

Mappings:
  StageMap:
    dev:
      LessonsTableName: language-learning-api-lessons-dev
      ProgressTableName: language-learning-api-progress-dev

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt LessonsTable.Arn
                  - !GetAtt UserProgressTable.Arn
              - Effect: Allow
                Action:
                  - translate:TranslateText
                  - polly:SynthesizeSpeech
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  LessonsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !FindInMap
        - StageMap
        - !Ref Stage
        - LessonsTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  UserProgressTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !FindInMap
        - StageMap
        - !Ref Stage
        - ProgressTableName
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  LoginFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-login
      Handler: functions/auth/login.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-deployment-bucket
        S3Key: your-code-package.zip
      Runtime: nodejs20.x
      Environment:
        Variables:
          LESSONS_TABLE: !Ref LessonsTable
          PROGRESS_TABLE: !Ref UserProgressTable
          COGNITO_USER_POOL_ID: !ImportValue auth-stack:UserPoolId
          COGNITO_CLIENT_ID: !ImportValue auth-stack:UserPoolClientId
          AWS_REGION: !Ref AWS::Region

  GetLessonsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getLessons
      Handler: functions/lessons/getLessons.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-deployment-bucket
        S3Key: your-code-package.zip
      Runtime: nodejs20.x
      Environment:
        Variables:
          LESSONS_TABLE: !Ref LessonsTable
          PROGRESS_TABLE: !Ref UserProgressTable
          COGNITO_USER_POOL_ID: !ImportValue auth-stack:UserPoolId
          COGNITO_CLIENT_ID: !ImportValue auth-stack:UserPoolClientId
          AWS_REGION: !Ref AWS::Region

  # Define other Lambda functions (getLesson, translateText, updateProgress) similarly

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api

  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: auth

  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations

  # Define other API Gateway resources and methods for other endpoints

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LoginMethod
      # Add other method dependencies
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Stage

Outputs:
  ApiUrl:
    Description: URL of the API Gateway
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}